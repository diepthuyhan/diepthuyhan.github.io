{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Readme \u00b6 Documents \u00b6 Tools \u00b6 Benchmark \u00b6 Wrk Locust Others \u00b6","title":"Readme"},{"location":"#readme","text":"","title":"Readme"},{"location":"#documents","text":"","title":"Documents"},{"location":"#tools","text":"","title":"Tools"},{"location":"#benchmark","text":"Wrk Locust","title":"Benchmark"},{"location":"#others","text":"","title":"Others"},{"location":"benchmark-tools/locust/locust/","text":"Locust - Overview \u00b6 An open source load testing tool Support Web UI, headless Support multiple node/distributed/master-slave Use Python define","title":"Locust - Overview"},{"location":"benchmark-tools/locust/locust/#locust-overview","text":"An open source load testing tool Support Web UI, headless Support multiple node/distributed/master-slave Use Python define","title":"Locust - Overview"},{"location":"benchmark-tools/wrk/wrk/","text":"Wrk \u00b6 Overview Commandline tool A HTTP benchmark tool Run multi thread Custom with LUAJIT script https://github.com/wg/wrk/blob/master/README.md Basic \u00b6 wrk -h wrk: invalid option -- h Usage: wrk <options> <url> Options: -c, --connections <N> Connections to keep open -d, --duration <T> Duration of test -t, --threads <N> Number of threads to use -s, --script <S> Load Lua script file -H, --header <H> Add header to request --latency Print latency statistics --timeout <T> Socket/request timeout -v, --version Print version details Numeric arguments may include a SI unit (1k, 1M, 1G) Time arguments may include a time unit (2s, 2m, 2h) wrk -t12 -c400 -d30s http://localhost:8080/ Note \u00b6 A user script that only changes the HTTP method, path, adds headers or a body, will have no performance impact. Per-request actions, particularly building a new HTTP request, and use of response() will necessarily reduce the amount of load that can be generated. Custom script \u00b6 https://github.com/wg/wrk/blob/master/SCRIPTING wrk -s <path/to/script> -t12 -c400 -d30s https://google.com:8080/ Phase \u00b6 settup running init delay request response done Each wrk thread has an independent scripting environment and the setup & done phases execute in a separate environment which does not participate in the running phase. Public Lua API consists of a global table wrk = { scheme = \"http\", host = \"localhost\", port = nil, method = \"GET\", path = \"/\", headers = {}, body = nil, thread = <userdata>, } Public global functions function wrk.format(method, path, headers, body) function wrk.lookup(host, service) function wrk.connect(addr) Option function global setup -- called during thread setup global init -- called when the thread is starting global delay -- called to get the request delay global request -- called to generate the HTTP request global response -- called with HTTP response data Parsing the headers and body is expensive, so if the response global is nil after the call to init() wrk will ignore the headers and body. global done -- called with results of run Example script \u00b6 Multiple requests path \u00b6 https://github.com/timotta/wrk-scripts/blob/master/multiplepaths.lua Office example \u00b6 https://github.com/wg/wrk/tree/master/scripts Ex \u00b6 local threads = {} counter = 1 function setup ( thread ) thread : set ( \"id\" , counter ) table.insert ( threads , thread ) counter = counter + 1 end function init ( args ) http4xx = 0 http5xx = 0 end function requests () url_path = \"https://google.com\" return wrk . format ( nil , url_path ) end function response ( status , headers , body ) if status > 399 then print ( \"HTTP ERROR \" .. status .. \" path \" .. url_path ) if status > 499 then http5xx = http5xx + 1 else http4xx = http4xx + 1 end end end function done ( summary , latency , requests ) total_4xx = 0 total_5xx = 0 for index , thread in ipairs ( threads ) do local http4xx = total_4xx + thread : get ( \"http4xx\" ) local http5xx = total_5xx + thread : get ( \"http5xx\" ) end print ( \"total 4xx \" .. total_4xx ) print ( \"total 5xx \" .. total_5xx ) end Docker \u00b6 Image: https://hub.docker.com/r/skandyla/wrk/dockerfile Image for run on other host \u00b6 cat > entrypoint.sh <<EOF #!/bin/sh wrk -s /data/script.lua --latency --timeout $timeout -t $threads -c $connections -d $duration $host EOF cat > script.lua <<EOF EOF cat > dockerfile <<EOF FROM skandyla/wrk WORKDIR /data COPY script.lua /data/script.lua COPY entrypoint.sh /data/entrypoint.sh RUN chmod +x /data/entrypoint.sh ENV timeout 2s ENV threads 20 ENV connections 20 ENV duration 600s ENV host http://localhost:8080 ENTRYPOINT [\"/data/entrypoint.sh\"] EOF cat > docker-compose <<EOF version: \"3\" services: wrk: build: context: . dockerfile: dockerfile image: wrk:latest environment: - timeout=2s - threads=20 - connections=20 - duration=600s - host=http://localhost:8080 EOF Run local \u00b6 docker run --rm -v $( pwd ) :/data skandyla/wrk -s script.lua -t 10 -c 20 -d 60s http://www.localhost:8080","title":"Wrk"},{"location":"benchmark-tools/wrk/wrk/#wrk","text":"Overview Commandline tool A HTTP benchmark tool Run multi thread Custom with LUAJIT script https://github.com/wg/wrk/blob/master/README.md","title":"Wrk"},{"location":"benchmark-tools/wrk/wrk/#basic","text":"wrk -h wrk: invalid option -- h Usage: wrk <options> <url> Options: -c, --connections <N> Connections to keep open -d, --duration <T> Duration of test -t, --threads <N> Number of threads to use -s, --script <S> Load Lua script file -H, --header <H> Add header to request --latency Print latency statistics --timeout <T> Socket/request timeout -v, --version Print version details Numeric arguments may include a SI unit (1k, 1M, 1G) Time arguments may include a time unit (2s, 2m, 2h) wrk -t12 -c400 -d30s http://localhost:8080/","title":"Basic"},{"location":"benchmark-tools/wrk/wrk/#note","text":"A user script that only changes the HTTP method, path, adds headers or a body, will have no performance impact. Per-request actions, particularly building a new HTTP request, and use of response() will necessarily reduce the amount of load that can be generated.","title":"Note"},{"location":"benchmark-tools/wrk/wrk/#custom-script","text":"https://github.com/wg/wrk/blob/master/SCRIPTING wrk -s <path/to/script> -t12 -c400 -d30s https://google.com:8080/","title":"Custom script"},{"location":"benchmark-tools/wrk/wrk/#phase","text":"settup running init delay request response done Each wrk thread has an independent scripting environment and the setup & done phases execute in a separate environment which does not participate in the running phase. Public Lua API consists of a global table wrk = { scheme = \"http\", host = \"localhost\", port = nil, method = \"GET\", path = \"/\", headers = {}, body = nil, thread = <userdata>, } Public global functions function wrk.format(method, path, headers, body) function wrk.lookup(host, service) function wrk.connect(addr) Option function global setup -- called during thread setup global init -- called when the thread is starting global delay -- called to get the request delay global request -- called to generate the HTTP request global response -- called with HTTP response data Parsing the headers and body is expensive, so if the response global is nil after the call to init() wrk will ignore the headers and body. global done -- called with results of run","title":"Phase"},{"location":"benchmark-tools/wrk/wrk/#example-script","text":"","title":"Example script"},{"location":"benchmark-tools/wrk/wrk/#multiple-requests-path","text":"https://github.com/timotta/wrk-scripts/blob/master/multiplepaths.lua","title":"Multiple requests path"},{"location":"benchmark-tools/wrk/wrk/#office-example","text":"https://github.com/wg/wrk/tree/master/scripts","title":"Office example"},{"location":"benchmark-tools/wrk/wrk/#ex","text":"local threads = {} counter = 1 function setup ( thread ) thread : set ( \"id\" , counter ) table.insert ( threads , thread ) counter = counter + 1 end function init ( args ) http4xx = 0 http5xx = 0 end function requests () url_path = \"https://google.com\" return wrk . format ( nil , url_path ) end function response ( status , headers , body ) if status > 399 then print ( \"HTTP ERROR \" .. status .. \" path \" .. url_path ) if status > 499 then http5xx = http5xx + 1 else http4xx = http4xx + 1 end end end function done ( summary , latency , requests ) total_4xx = 0 total_5xx = 0 for index , thread in ipairs ( threads ) do local http4xx = total_4xx + thread : get ( \"http4xx\" ) local http5xx = total_5xx + thread : get ( \"http5xx\" ) end print ( \"total 4xx \" .. total_4xx ) print ( \"total 5xx \" .. total_5xx ) end","title":"Ex"},{"location":"benchmark-tools/wrk/wrk/#docker","text":"Image: https://hub.docker.com/r/skandyla/wrk/dockerfile","title":"Docker"},{"location":"benchmark-tools/wrk/wrk/#image-for-run-on-other-host","text":"cat > entrypoint.sh <<EOF #!/bin/sh wrk -s /data/script.lua --latency --timeout $timeout -t $threads -c $connections -d $duration $host EOF cat > script.lua <<EOF EOF cat > dockerfile <<EOF FROM skandyla/wrk WORKDIR /data COPY script.lua /data/script.lua COPY entrypoint.sh /data/entrypoint.sh RUN chmod +x /data/entrypoint.sh ENV timeout 2s ENV threads 20 ENV connections 20 ENV duration 600s ENV host http://localhost:8080 ENTRYPOINT [\"/data/entrypoint.sh\"] EOF cat > docker-compose <<EOF version: \"3\" services: wrk: build: context: . dockerfile: dockerfile image: wrk:latest environment: - timeout=2s - threads=20 - connections=20 - duration=600s - host=http://localhost:8080 EOF","title":"Image for run on other host"},{"location":"benchmark-tools/wrk/wrk/#run-local","text":"docker run --rm -v $( pwd ) :/data skandyla/wrk -s script.lua -t 10 -c 20 -d 60s http://www.localhost:8080","title":"Run local"},{"location":"benchmark-tools/wrk/wrk.vn/","text":"Wrk - vn \u00b6 Commanline tool Benchmark HTTP method D\u00f9ng LUAJIT script Ch\u1ea1y multi thread Kh\u00f4ng h\u1ed7 tr\u1ee3 nhi\u1ec1u worker https://github.com/wg/wrk/blob/master/README.md C\u00e1ch d\u00f9ng \u00b6 wrk -h wrk: invalid option -- h Usage: wrk <options> <url> Options: -c, --connections <N> Connections to keep open -d, --duration <T> Duration of test -t, --threads <N> Number of threads to use -s, --script <S> Load Lua script file -H, --header <H> Add header to request --latency Print latency statistics --timeout <T> Socket/request timeout -v, --version Print version details Numeric arguments may include a SI unit (1k, 1M, 1G) Time arguments may include a time unit (2s, 2m, 2h) wrk -t12 -c400 -d30s https://google.com:8080/","title":"Wrk - vn"},{"location":"benchmark-tools/wrk/wrk.vn/#wrk-vn","text":"Commanline tool Benchmark HTTP method D\u00f9ng LUAJIT script Ch\u1ea1y multi thread Kh\u00f4ng h\u1ed7 tr\u1ee3 nhi\u1ec1u worker https://github.com/wg/wrk/blob/master/README.md","title":"Wrk - vn"},{"location":"benchmark-tools/wrk/wrk.vn/#cach-dung","text":"wrk -h wrk: invalid option -- h Usage: wrk <options> <url> Options: -c, --connections <N> Connections to keep open -d, --duration <T> Duration of test -t, --threads <N> Number of threads to use -s, --script <S> Load Lua script file -H, --header <H> Add header to request --latency Print latency statistics --timeout <T> Socket/request timeout -v, --version Print version details Numeric arguments may include a SI unit (1k, 1M, 1G) Time arguments may include a time unit (2s, 2m, 2h) wrk -t12 -c400 -d30s https://google.com:8080/","title":"C\u00e1ch d\u00f9ng"}]}